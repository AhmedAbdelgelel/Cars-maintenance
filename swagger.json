{
  "openapi": "3.0.0",
  "info": {
    "title": "Car Maintenance API",
    "version": "1.0.0",
    "description": "API documentation for Car Maintenance System",
    "contact": {
      "name": "API Support",
      "email": "support@carmaintenance.com"
    }
  },
  "servers": [
    {
      "url": "https://srv830738.hstgr.cloud/api",
      "description": "Production Server"
    },
    {
      "url": "http://localhost:3000/api",
      "description": "Development Server"
    }
  ],
  "tags": [
    {
      "name": "Cars",
      "description": "Car management endpoints"
    },
    {
      "name": "Drivers",
      "description": "Driver management endpoints"
    },
    {
      "name": "Maintenance",
      "description": "Maintenance record endpoints"
    },
    {
      "name": "Categories",
      "description": "Maintenance category endpoints"
    },
    {
      "name": "SubCategories",
      "description": "Maintenance subcategory endpoints"
    },
    {
      "name": "Car Meter",
      "description": "Car meter reading image analysis endpoints"
    },
    {
      "name": "Authentication",
      "description": "Driver authentication endpoints"
    },
    {
      "name": "Admin",
      "description": "Admin authentication and management endpoints"
    }
  ],
  "paths": {
    "/cars": {
      "get": {
        "summary": "Get all cars",
        "tags": [
          "Cars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 4
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Car"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new car",
        "tags": [
          "Cars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CarInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Car created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Car created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Car"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "summary": "Get a car by ID",
        "tags": [
          "Cars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The car ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Car details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CarDetailed"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a car",
        "tags": [
          "Cars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The car ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CarInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Car updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Car updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Car"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a car",
        "tags": [
          "Cars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The car ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Car deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Car deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cars/search": {
      "get": {
        "summary": "Search cars by plate number and brand",
        "tags": [
          "Cars"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "plateNumber",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Car plate number (partial or full)"
          },
          {
            "in": "query",
            "name": "brand",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Car brand (partial or full)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of cars matching search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 2
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Car"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/drivers": {
      "get": {
        "summary": "Get all drivers",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of drivers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 4
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Driver"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/drivers/me": {
      "get": {
        "summary": "Get current driver's profile and maintenance history",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as driver only. Returns the profile of the currently authenticated driver with their maintenance history.",
        "responses": {
          "200": {
            "description": "Driver profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "driver": {
                          "$ref": "#/components/schemas/Driver"
                        },
                        "maintenanceHistory": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Maintenance"
                          },
                          "description": "Maintenance history for the driver"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Not logged in or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Driver access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/drivers/{id}": {
      "get": {
        "summary": "Get a driver by ID",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The driver ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Driver details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Driver"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a driver",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The driver ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Driver updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Driver updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Driver"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a driver",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The driver ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Driver deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Driver deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/drivers/phone/{phoneNumber}": {
      "get": {
        "summary": "Get a driver by phone number",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "phoneNumber",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The driver's phone number"
          }
        ],
        "responses": {
          "200": {
            "description": "Driver details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Driver"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/drivers/{id}/maintenance": {
      "get": {
        "summary": "Get maintenance records for a driver",
        "tags": [
          "Drivers",
          "Maintenance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The driver ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of maintenance records for the driver",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 3
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Maintenance"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Driver not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/drivers/search": {
      "get": {
        "summary": "Search drivers by name, phone number, license, or national ID",
        "tags": [
          "Drivers"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Driver name (partial or full)"
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Driver phone number (partial or full)"
          },
          {
            "in": "query",
            "name": "licenseNumber",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Driver license number (partial or full)"
          },
          {
            "in": "query",
            "name": "nationalId",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Driver national ID (partial or full)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of drivers matching search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 2
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Driver"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing search parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/maintenance": {
      "get": {
        "summary": "Get all maintenance records",
        "tags": [
          "Maintenance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "responses": {
          "200": {
            "description": "A list of maintenance records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 23
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Maintenance"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new maintenance record",
        "tags": [
          "Maintenance"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Maintenance record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Maintenance record created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Maintenance"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/maintenance/{id}": {
      "get": {
        "summary": "Get a maintenance record by ID",
        "tags": [
          "Maintenance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The maintenance record ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "responses": {
          "200": {
            "description": "Maintenance record details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Maintenance"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Maintenance record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a maintenance record",
        "tags": [
          "Maintenance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The maintenance record ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaintenanceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Maintenance record updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Maintenance record updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Maintenance"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Maintenance record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a maintenance record",
        "tags": [
          "Maintenance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The maintenance record ID"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "responses": {
          "200": {
            "description": "Maintenance record deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Maintenance record deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Maintenance record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/maintenance/car/{carId}": {
      "get": {
        "summary": "Get maintenance records for a specific car",
        "tags": [
          "Maintenance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "carId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The car ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of maintenance records for the car",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 5
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Maintenance"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "Get all maintenance categories",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "responses": {
          "200": {
            "description": "A list of maintenance categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 10
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new maintenance category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "summary": "Get a category by ID",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CategoryDetailed"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a category",
        "tags": [
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Category deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subcategories": {
      "get": {
        "summary": "Get all subcategories",
        "tags": [
          "SubCategories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "responses": {
          "200": {
            "description": "A list of subcategories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 41
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubCategory"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new subcategory",
        "tags": [
          "SubCategories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubCategoryInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subcategory created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Subcategory created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subcategories/{id}": {
      "get": {
        "summary": "Get a subcategory by ID",
        "tags": [
          "SubCategories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The subcategory ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subcategory details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubCategory"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subcategory not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a subcategory",
        "tags": [
          "SubCategories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The subcategory ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubCategoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subcategory updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Subcategory updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubCategory"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subcategory not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a subcategory",
        "tags": [
          "SubCategories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The subcategory ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Subcategory deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Subcategory deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subcategory not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subcategories/category/{categoryId}": {
      "get": {
        "summary": "Get all subcategories for a specific category",
        "tags": [
          "SubCategories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Requires authentication as admin or driver.",
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The category ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subcategories for the category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 4
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new driver",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Driver registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "driver": {
                          "$ref": "#/components/schemas/Driver"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or driver already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Log in a driver",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Driver logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "driver": {
                          "$ref": "#/components/schemas/Driver"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing phone number or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - incorrect phone number or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/register": {
      "post": {
        "summary": "Register a new admin",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminRegisterInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "admin": {
                          "$ref": "#/components/schemas/Admin"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or admin already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/login": {
      "post": {
        "summary": "Log in an admin",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminLoginInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "admin": {
                          "$ref": "#/components/schemas/Admin"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing email or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - incorrect email or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin": {
      "get": {
        "summary": "Get all admins",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of admins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "results": {
                      "type": "number",
                      "example": 2
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "admins": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Admin"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/{id}": {
      "get": {
        "summary": "Get an admin by ID",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The admin ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "admin": {
                          "$ref": "#/components/schemas/Admin"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an admin",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The admin ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Admin updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "admin": {
                          "$ref": "#/components/schemas/Admin"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deactivate an admin",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The admin ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin deactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Admin deactivated successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Admin access required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/car-meter/analyze": {
      "post": {
        "summary": "Analyze a car meter image",
        "tags": [
          "Car Meter"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "meterImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file of car meter"
                  }
                },
                "required": [
                  "meterImage"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image analyzed successfully and meter reading updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "meterReading": {
                          "$ref": "#/components/schemas/MeterReading/properties/meterReading"
                        },
                        "imagePath": {
                          "type": "string",
                          "example": "/uploads/1621234567890.jpg"
                        },
                        "updatedCar": {
                          "$ref": "#/components/schemas/Car"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request, missing image, or driver has no car assigned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to analyze image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/car-meter/update-reading": {
      "post": {
        "summary": "Update a car with meter reading",
        "tags": [
          "Car Meter"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeterUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Car meter reading updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Car meter reading updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Car"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or missing data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout a user",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Logout the currently authenticated user. This invalidates the current session and requires the client to remove the JWT token.",
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Not logged in or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Car": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "plateNumber": {
            "type": "string",
            "example": "ABC1234"
          },
          "brand": {
            "type": "string",
            "example": "Toyota"
          },
          "model": {
            "type": "string",
            "example": "Camry"
          },
          "year": {
            "type": "number",
            "example": 2020
          },
          "color": {
            "type": "string",
            "example": "Silver"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "in_use",
              "maintenance"
            ],
            "example": "available"
          },
          "meterReading": {
            "type": "number",
            "example": 123456
          },
          "lastMeterUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CarDetailed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "plateNumber": {
            "type": "string",
            "example": "ABC1234"
          },
          "brand": {
            "type": "string",
            "example": "Toyota"
          },
          "model": {
            "type": "string",
            "example": "Camry"
          },
          "year": {
            "type": "number",
            "example": 2020
          },
          "color": {
            "type": "string",
            "example": "Silver"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "in_use",
              "maintenance"
            ],
            "example": "available"
          },
          "driver": {
            "$ref": "#/components/schemas/Driver"
          },
          "maintenanceHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Maintenance"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CarInput": {
        "type": "object",
        "properties": {
          "plateNumber": {
            "type": "string",
            "example": "ABC1234"
          },
          "brand": {
            "type": "string",
            "example": "Toyota"
          },
          "model": {
            "type": "string",
            "example": "Camry"
          },
          "year": {
            "type": "number",
            "example": 2020
          },
          "color": {
            "type": "string",
            "example": "Silver"
          },
          "driver": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "in_use",
              "maintenance"
            ],
            "example": "available"
          }
        },
        "required": [
          "plateNumber",
          "brand",
          "model",
          "year",
          "color"
        ]
      },
      "Driver": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c86"
          },
          "name": {
            "type": "string",
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "example": "john.smith@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "nationalId": {
            "type": "string",
            "example": "ABC123456"
          },
          "licenseNumber": {
            "type": "string",
            "example": "DL98765"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Anytown"
          },
          "car": {
            "$ref": "#/components/schemas/Car"
          },
          "role": {
            "type": "string",
            "enum": [
              "driver",
              "admin"
            ],
            "example": "driver"
          }
        }
      },
      "DriverInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Smith"
          },
          "email": {
            "type": "string",
            "example": "john.smith@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "nationalId": {
            "type": "string",
            "example": "ABC123456"
          },
          "licenseNumber": {
            "type": "string",
            "example": "DL98765"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Anytown"
          },
          "car": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "email",
          "phoneNumber",
          "nationalId",
          "licenseNumber",
          "address"
        ]
      },
      "Maintenance": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c87"
          },
          "car": {
            "oneOf": [
              {
                "type": "string",
                "example": "60d21b4667d0d8992e610c85"
              },
              {
                "$ref": "#/components/schemas/Car"
              }
            ]
          },
          "driver": {
            "oneOf": [
              {
                "type": "string",
                "example": "60d21b4667d0d8992e610c86"
              },
              {
                "$ref": "#/components/schemas/Driver"
              }
            ]
          },
          "subCategories": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "example": "60d21b4667d0d8992e610c88"
                },
                {
                  "$ref": "#/components/schemas/SubCategory"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "example": "Regular maintenance - oil change and air filter replacement"
          },
          "cost": {
            "type": "number",
            "example": 120,
            "description": "Total cost for the maintenance operation"
          },
          "mechanicCost": {
            "type": "number",
            "example": 80,
            "description": "Labor cost for the mechanic"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MaintenanceInput": {
        "type": "object",
        "properties": {
          "car": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "driver": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c86"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c88"
            }
          },
          "description": {
            "type": "string",
            "example": "Regular maintenance - oil change and air filter replacement"
          },
          "cost": {
            "type": "number",
            "example": 120,
            "description": "Total cost for the maintenance operation"
          },
          "mechanicCost": {
            "type": "number",
            "example": 80,
            "description": "Labor cost for the mechanic"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "car",
          "driver",
          "subCategories",
          "cost",
          "mechanicCost"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c89"
          },
          "name": {
            "type": "string",
            "example": "Engine"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "60d21b4667d0d8992e610c88"
            }
          }
        }
      },
      "CategoryDetailed": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c89"
          },
          "name": {
            "type": "string",
            "example": "Engine"
          },
          "subCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubCategory"
            }
          }
        }
      },
      "CategoryInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Engine"
          }
        },
        "required": [
          "name"
        ]
      },
      "SubCategory": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c88"
          },
          "name": {
            "type": "string",
            "example": "Oil Change"
          },
          "category": {
            "oneOf": [
              {
                "type": "string",
                "example": "60d21b4667d0d8992e610c89"
              },
              {
                "$ref": "#/components/schemas/Category"
              }
            ]
          },
          "cost": {
            "type": "number",
            "example": 50,
            "description": "Standard cost for mechanic service"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubCategoryInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Oil Change"
          },
          "category": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c89"
          },
          "description": {
            "type": "string",
            "example": "Regular oil and filter change"
          }
        },
        "required": [
          "name",
          "description",
          "category"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Resource not found"
          }
        }
      },
      "MeterReading": {
        "type": "object",
        "properties": {
          "meterReading": {
            "type": "object",
            "properties": {
              "rawText": {
                "type": "string",
                "example": "123456 km\nOil Check\nService Due: 5000 km"
              },
              "possibleReadings": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "123456"
                    },
                    "context": {
                      "type": "string",
                      "example": "123456 km"
                    }
                  }
                }
              }
            }
          },
          "imagePath": {
            "type": "string",
            "example": "/uploads/1621234567890.jpg"
          }
        }
      },
      "MeterUpdateInput": {
        "type": "object",
        "properties": {
          "meterReading": {
            "type": "number",
            "example": 123456
          }
        },
        "required": [
          "meterReading"
        ]
      },
      "RegisterInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Smith"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123",
            "minLength": 8
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "nationalId": {
            "type": "string",
            "example": "ABC123456"
          },
          "licenseNumber": {
            "type": "string",
            "example": "DL98765"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Anytown"
          },
          "car": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          }
        },
        "required": [
          "name",
          "password",
          "phoneNumber",
          "nationalId",
          "licenseNumber",
          "address"
        ]
      },
      "LoginInput": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": [
          "phoneNumber",
          "password"
        ]
      },
      "Admin": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-15T10:30:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-15T10:30:00.000Z"
          }
        }
      },
      "AdminRegisterInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123",
            "minLength": 8
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          }
        },
        "required": [
          "name",
          "email",
          "password",
          "phoneNumber"
        ]
      },
      "AdminLoginInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AdminUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "123-456-7890"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      }
    }
  }
}